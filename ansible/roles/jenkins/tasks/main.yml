- name: Check if {{ stage_api_secret_name }} exists
  command: "{{ oc }} get secret {{ stage_api_secret_name }} -n {{ project_name }}"
  when: stage_api_secret_name is defined
  register: stage_api_secret_exists
  ignore_errors: true
- name: Check if {{ prod_api_secret_name }} exists
  command: "{{ oc }} get secret {{ prod_api_secret_name }} -n {{ project_name }}"
  when: prod_api_secret_name is defined
  register: prod_api_secret_exists
  ignore_errors: true
- name: Create secret {{ stage_api_secret_name }}
  command: "{{ oc }} secret new-basicauth {{ stage_api_secret_name }} --password {{ hostvars['stage']['jenkinstoken'] }} -n {{ project_name }}"
  when:
    - stage_api_secret_exists|failed
    - hostvars['stage']['jenkinstoken'] is defined
- name: Create secret {{ prod_api_secret_name }}
  command: "{{ oc }} secret new-basicauth {{ prod_api_secret_name }} --password {{ hostvars['prod']['jenkinstoken'] }} -n {{ project_name }}"
  when:
    - prod_api_secret_exists|failed
    - hostvars['prod']['jenkinstoken'] is defined
- name: Create custom Jenkins source-to-image build
  shell: "{{ oc }} process -f {{ role_path }}/files/jenkins-custom-build.yaml -n {{ project_name }} | {{ oc }} apply -f - -n {{ project_name }}"
- name: Create Jenkins app
  shell: "{{ oc }} process openshift//jenkins-persistent --param NAMESPACE={{ project_name }} --param VOLUME_CAPACITY={{ jenkins_volume_size }} --param JENKINS_IMAGE_STREAM_TAG=jenkins-custom:latest -n {{ project_name }} | {{ oc }} apply -f - -n {{ project_name }}"
- name: Remove Jenkins app image change trigger
  command: "{{ oc }} set triggers dc/jenkins --remove-all=true -n {{ project_name }}"
- name: Remove all Jenkins image build triggers
  command: "{{ oc }} set triggers bc/jenkins-custom --remove-all=true -n {{ project_name }}"
- name: Create Jenkins pipeline
  shell: "{{ oc }} process -f {{ role_path }}/files/pipeline-build.yaml -n {{ project_name }} | {{ oc }} apply -f - -n {{ project_name }}"
